$date
	Wed Jun 26 16:01:39 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module regfile_tb $end
$var wire 16 ! o_rf_rd_data1 [15:0] $end
$var wire 16 " o_rf_rd_data0 [15:0] $end
$var reg 1 # i_clk $end
$var reg 4 $ i_rf_rd_addr0 [3:0] $end
$var reg 4 % i_rf_rd_addr1 [3:0] $end
$var reg 4 & i_rf_wr_addr [3:0] $end
$var reg 16 ' i_rf_wr_data [15:0] $end
$var reg 1 ( i_rf_wr_en $end
$var reg 256 ) taskState [255:0] $end
$var reg 256 * vcd_file [255:0] $end
$var integer 32 + i [31:0] $end
$scope module u_regfile $end
$var wire 1 # i_clk $end
$var wire 4 , i_rf_rd_addr0 [3:0] $end
$var wire 4 - i_rf_rd_addr1 [3:0] $end
$var wire 4 . i_rf_wr_addr [3:0] $end
$var wire 16 / i_rf_wr_data [15:0] $end
$var wire 1 ( i_rf_wr_en $end
$var wire 16 0 o_rf_rd_data0 [15:0] $end
$var wire 16 1 o_rf_rd_data1 [15:0] $end
$upscope $end
$scope task init $end
$upscope $end
$scope task regRD $end
$var reg 4 2 ti_rf_rd_addr0 [3:0] $end
$var reg 4 3 ti_rf_rd_addr1 [3:0] $end
$upscope $end
$scope task regWR $end
$var reg 4 4 ti_rf_wr_addr [3:0] $end
$var reg 16 5 ti_rf_wr_data [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 6 \rf_arr[0] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 7 \rf_arr[1] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 8 \rf_arr[2] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 9 \rf_arr[3] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 : \rf_arr[4] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 ; \rf_arr[5] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 < \rf_arr[6] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 = \rf_arr[7] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 > \rf_arr[8] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 ? \rf_arr[9] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 @ \rf_arr[10] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 A \rf_arr[11] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 B \rf_arr[12] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 C \rf_arr[13] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 D \rf_arr[14] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$var reg 16 E \rf_arr[15] [15:0] $end
$upscope $end
$upscope $end
$scope module regfile_tb $end
$scope module u_regfile $end
$upscope $end
$scope task init $end
$upscope $end
$scope task regRD $end
$upscope $end
$scope task regWR $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
b0 /
b0 .
b0 -
b0 ,
b10000 +
b10111000101111011101100110001101100100001011110111001001100101011001110110011001101001011011000110010100101110011101100110001101100100 *
b1001001011011100110100101110100 )
0(
b0 '
b0 &
b0 %
b0 $
0#
bx "
bx !
$end
#5000
bx 6
1#
#10000
0#
#15000
bx 6
1#
#20000
0#
#25000
bx 6
1#
#30000
0#
#35000
bx 6
1#
#40000
1(
b101011101010010 )
0#
b1 5
b1 4
b1 +
#45000
b0 6
b0 "
b0 0
b0 !
b0 1
1#
#50000
b10 5
b10 4
b10 +
b1 &
b1 .
b1 '
b1 /
0#
#55000
b1 7
1#
#60000
b11 5
b11 4
b11 +
b10 &
b10 .
b10 '
b10 /
0#
#65000
b10 8
1#
#70000
b100 5
b100 4
b100 +
b11 &
b11 .
b11 '
b11 /
0#
#75000
b11 9
1#
#80000
b101 5
b101 4
b101 +
b100 &
b100 .
b100 '
b100 /
0#
#85000
b100 :
1#
#90000
b110 5
b110 4
b110 +
b101 &
b101 .
b101 '
b101 /
0#
#95000
b101 ;
1#
#100000
b111 5
b111 4
b111 +
b110 &
b110 .
b110 '
b110 /
0#
#105000
b110 <
1#
#110000
b1000 5
b1000 4
b1000 +
b111 &
b111 .
b111 '
b111 /
0#
#115000
b111 =
1#
#120000
b1001 5
b1001 4
b1001 +
b1000 &
b1000 .
b1000 '
b1000 /
0#
#125000
b1000 >
1#
#130000
b1010 5
b1010 4
b1010 +
b1001 &
b1001 .
b1001 '
b1001 /
0#
#135000
b1001 ?
1#
#140000
b1011 5
b1011 4
b1011 +
b1010 &
b1010 .
b1010 '
b1010 /
0#
#145000
b1010 @
1#
#150000
b1100 5
b1100 4
b1100 +
b1011 &
b1011 .
b1011 '
b1011 /
0#
#155000
b1011 A
1#
#160000
b1101 5
b1101 4
b1101 +
b1100 &
b1100 .
b1100 '
b1100 /
0#
#165000
b1100 B
1#
#170000
b1110 5
b1110 4
b1110 +
b1101 &
b1101 .
b1101 '
b1101 /
0#
#175000
b1101 C
1#
#180000
b1111 5
b1111 4
b1111 +
b1110 &
b1110 .
b1110 '
b1110 /
0#
#185000
b1110 D
1#
#190000
b0 3
b0 2
b0 +
b1111 &
b1111 .
b1111 '
b1111 /
0#
#195000
b1111 E
1#
#200000
b1 3
b1 2
b1 +
0(
b101001001000100 )
0#
#205000
b1111 E
1#
#210000
b10 3
b10 2
b10 +
b1 !
b1 1
b1 %
b1 -
b1 "
b1 0
b1 $
b1 ,
0#
#215000
b1111 E
1#
#220000
b11 3
b11 2
b11 +
b10 !
b10 1
b10 %
b10 -
b10 "
b10 0
b10 $
b10 ,
0#
#225000
b1111 E
1#
#230000
b100 3
b100 2
b100 +
b11 !
b11 1
b11 %
b11 -
b11 "
b11 0
b11 $
b11 ,
0#
#235000
b1111 E
1#
#240000
b101 3
b101 2
b101 +
b100 !
b100 1
b100 %
b100 -
b100 "
b100 0
b100 $
b100 ,
0#
#245000
b1111 E
1#
#250000
b110 3
b110 2
b110 +
b101 !
b101 1
b101 %
b101 -
b101 "
b101 0
b101 $
b101 ,
0#
#255000
b1111 E
1#
#260000
b111 3
b111 2
b111 +
b110 !
b110 1
b110 %
b110 -
b110 "
b110 0
b110 $
b110 ,
0#
#265000
b1111 E
1#
#270000
b1000 3
b1000 2
b1000 +
b111 !
b111 1
b111 %
b111 -
b111 "
b111 0
b111 $
b111 ,
0#
#275000
b1111 E
1#
#280000
b1001 3
b1001 2
b1001 +
b1000 !
b1000 1
b1000 %
b1000 -
b1000 "
b1000 0
b1000 $
b1000 ,
0#
#285000
b1111 E
1#
#290000
b1010 3
b1010 2
b1010 +
b1001 !
b1001 1
b1001 %
b1001 -
b1001 "
b1001 0
b1001 $
b1001 ,
0#
#295000
b1111 E
1#
#300000
b1011 3
b1011 2
b1011 +
b1010 !
b1010 1
b1010 %
b1010 -
b1010 "
b1010 0
b1010 $
b1010 ,
0#
#305000
b1111 E
1#
#310000
b1100 3
b1100 2
b1100 +
b1011 !
b1011 1
b1011 %
b1011 -
b1011 "
b1011 0
b1011 $
b1011 ,
0#
#315000
b1111 E
1#
#320000
b1101 3
b1101 2
b1101 +
b1100 !
b1100 1
b1100 %
b1100 -
b1100 "
b1100 0
b1100 $
b1100 ,
0#
#325000
b1111 E
1#
#330000
b1110 3
b1110 2
b1110 +
b1101 !
b1101 1
b1101 %
b1101 -
b1101 "
b1101 0
b1101 $
b1101 ,
0#
#335000
b1111 E
1#
#340000
b1111 3
b1111 2
b1111 +
b1110 !
b1110 1
b1110 %
b1110 -
b1110 "
b1110 0
b1110 $
b1110 ,
0#
#345000
b1111 E
1#
#350000
b1001001000010101 5
b0 4
b0 +
b1111 !
b1111 1
b1111 %
b1111 -
b1111 "
b1111 0
b1111 $
b1111 ,
0#
#355000
b1111 E
1#
#360000
1(
b0 &
b0 .
b1001001000010101 '
b1001001000010101 /
b101011101010010 )
0#
#365000
b1001001000010101 6
1#
#370000
b100000010001001 5
b1 4
b1 +
0(
b1001001000010101 !
b1001001000010101 1
b0 %
b0 -
b1001001000010101 "
b1001001000010101 0
b0 $
b0 ,
b101001001000100 )
0#
b0 3
b0 2
#375000
b1001001000010101 6
1#
#380000
1(
b1 &
b1 .
b100000010001001 '
b100000010001001 /
b101011101010010 )
0#
#385000
b100000010001001 7
1#
#390000
b10010000100 5
b10 4
b10 +
0(
b100000010001001 !
b100000010001001 1
b1 %
b1 -
b100000010001001 "
b100000010001001 0
b1 $
b1 ,
b101001001000100 )
0#
b1 3
b1 2
#395000
b100000010001001 7
1#
#400000
1(
b10 &
b10 .
b10010000100 '
b10010000100 /
b101011101010010 )
0#
#405000
b10010000100 8
1#
#410000
b11000111110000 5
b11 4
b11 +
0(
b10010000100 !
b10010000100 1
b10 %
b10 -
b10010000100 "
b10010000100 0
b10 $
b10 ,
b101001001000100 )
0#
b10 3
b10 2
#415000
b10010000100 8
1#
#420000
1(
b11 &
b11 .
b11000111110000 '
b11000111110000 /
b101011101010010 )
0#
#425000
b11000111110000 9
1#
#430000
b1000011010111001 5
b100 4
b100 +
0(
b11000111110000 !
b11000111110000 1
b11 %
b11 -
b11000111110000 "
b11000111110000 0
b11 $
b11 ,
b101001001000100 )
0#
b11 3
b11 2
#435000
b11000111110000 9
1#
#440000
1(
b100 &
b100 .
b1000011010111001 '
b1000011010111001 /
b101011101010010 )
0#
#445000
b1000011010111001 :
1#
#450000
b1100011011011111 5
b101 4
b101 +
0(
b1000011010111001 !
b1000011010111001 1
b100 %
b100 -
b1000011010111001 "
b1000011010111001 0
b100 $
b100 ,
b101001001000100 )
0#
b100 3
b100 2
#455000
b1000011010111001 :
1#
#460000
1(
b101 &
b101 .
b1100011011011111 '
b1100011011011111 /
b101011101010010 )
0#
#465000
b1100011011011111 ;
1#
#470000
b11001011000010 5
b110 4
b110 +
0(
b1100011011011111 !
b1100011011011111 1
b101 %
b101 -
b1100011011011111 "
b1100011011011111 0
b101 $
b101 ,
b101001001000100 )
0#
b101 3
b101 2
#475000
b1100011011011111 ;
1#
#480000
1(
b110 &
b110 .
b11001011000010 '
b11001011000010 /
b101011101010010 )
0#
#485000
b11001011000010 <
1#
#490000
b100100110111 5
b111 4
b111 +
0(
b11001011000010 !
b11001011000010 1
b110 %
b110 -
b11001011000010 "
b11001011000010 0
b110 $
b110 ,
b101001001000100 )
0#
b110 3
b110 2
#495000
b11001011000010 <
1#
#500000
1(
b111 &
b111 .
b100100110111 '
b100100110111 /
b101011101010010 )
0#
#505000
b100100110111 =
1#
#510000
b1000000011110011 5
b1000 4
b1000 +
0(
b100100110111 !
b100100110111 1
b111 %
b111 -
b100100110111 "
b100100110111 0
b111 $
b111 ,
b101001001000100 )
0#
b111 3
b111 2
#515000
b100100110111 =
1#
#520000
1(
b1000 &
b1000 .
b1000000011110011 '
b1000000011110011 /
b101011101010010 )
0#
#525000
b1000000011110011 >
1#
#530000
b1000011011010111 5
b1001 4
b1001 +
0(
b1000000011110011 !
b1000000011110011 1
b1000 %
b1000 -
b1000000011110011 "
b1000000011110011 0
b1000 $
b1000 ,
b101001001000100 )
0#
b1000 3
b1000 2
#535000
b1000000011110011 >
1#
#540000
1(
b1001 &
b1001 .
b1000011011010111 '
b1000011011010111 /
b101011101010010 )
0#
#545000
b1000011011010111 ?
1#
#550000
b1011101100100011 5
b1010 4
b1010 +
0(
b1000011011010111 !
b1000011011010111 1
b1001 %
b1001 -
b1000011011010111 "
b1000011011010111 0
b1001 $
b1001 ,
b101001001000100 )
0#
b1001 3
b1001 2
#555000
b1000011011010111 ?
1#
#560000
1(
b1010 &
b1010 .
b1011101100100011 '
b1011101100100011 /
b101011101010010 )
0#
#565000
b1011101100100011 @
1#
#570000
b1001111010001101 5
b1011 4
b1011 +
0(
b1011101100100011 !
b1011101100100011 1
b1010 %
b1010 -
b1011101100100011 "
b1011101100100011 0
b1010 $
b1010 ,
b101001001000100 )
0#
b1010 3
b1010 2
#575000
b1011101100100011 @
1#
#580000
1(
b1011 &
b1011 .
b1001111010001101 '
b1001111010001101 /
b101011101010010 )
0#
#585000
b1001111010001101 A
1#
#590000
b1111011011010100 5
b1100 4
b1100 +
0(
b1001111010001101 !
b1001111010001101 1
b1011 %
b1011 -
b1001111010001101 "
b1001111010001101 0
b1011 $
b1011 ,
b101001001000100 )
0#
b1011 3
b1011 2
#595000
b1001111010001101 A
1#
#600000
1(
b1100 &
b1100 .
b1111011011010100 '
b1111011011010100 /
b101011101010010 )
0#
#605000
b1111011011010100 B
1#
#610000
b1100011000101101 5
b1101 4
b1101 +
0(
b1111011011010100 !
b1111011011010100 1
b1100 %
b1100 -
b1111011011010100 "
b1111011011010100 0
b1100 $
b1100 ,
b101001001000100 )
0#
b1100 3
b1100 2
#615000
b1111011011010100 B
1#
#620000
1(
b1101 &
b1101 .
b1100011000101101 '
b1100011000101101 /
b101011101010010 )
0#
#625000
b1100011000101101 C
1#
#630000
b1111110011111101 5
b1110 4
b1110 +
0(
b1100011000101101 !
b1100011000101101 1
b1101 %
b1101 -
b1100011000101101 "
b1100011000101101 0
b1101 $
b1101 ,
b101001001000100 )
0#
b1101 3
b1101 2
#635000
b1100011000101101 C
1#
#640000
1(
b1110 &
b1110 .
b1111110011111101 '
b1111110011111101 /
b101011101010010 )
0#
#645000
b1111110011111101 D
1#
#650000
b110001100110111 5
b1111 4
b1111 +
0(
b1111110011111101 !
b1111110011111101 1
b1110 %
b1110 -
b1111110011111101 "
b1111110011111101 0
b1110 $
b1110 ,
b101001001000100 )
0#
b1110 3
b1110 2
#655000
b1111110011111101 D
1#
#660000
1(
b1111 &
b1111 .
b110001100110111 '
b110001100110111 /
b101011101010010 )
0#
#665000
b110001100110111 E
1#
#670000
b10000 +
0(
b110001100110111 !
b110001100110111 1
b1111 %
b1111 -
b110001100110111 "
b110001100110111 0
b1111 $
b1111 ,
b101001001000100 )
0#
b1111 3
b1111 2
